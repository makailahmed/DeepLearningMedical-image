1.Explore two image enhancement techniques from each methods and apply them to a specific medical image.


Gamma Correction for Image Enhancement
Overview
This Python script applies Gamma Correction to an image using OpenCV and NumPy. Gamma correction is a non-linear image enhancement technique that adjusts the brightness and contrast of an image, making details more visible
code:
import cv2
import numpy as np
import matplotlib.pyplot as plt

def gamma_correction(image, gamma=1.0):
    invGamma = 1.0 / gamma
    table = np.array([((i / 255.0) ** invGamma) * 255 for i in np.arange(0, 256)]).astype("uint8")
    return cv2.LUT(image, table)

# Load image
image = cv2.imread('/content/Picture1.png')
gamma_corrected = gamma_correction(image, gamma=2.0)

# Display the result
plt.figure(figsize=(10,5))
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.subplot(1, 2, 2)
plt.title('Gamma Corrected Image')
plt.imshow(cv2.cvtColor(gamma_corrected, cv2.COLOR_BGR2RGB))
plt.show()


=====================================================
import cv2
import numpy as np
import matplotlib.pyplot as plt

def gamma_correction(image, gamma=1.0):
    invGamma = 1.0 / gamma
    table = np.array([((i / 255.0) ** invGamma) * 255 for i in np.arange(0, 256)]).astype("uint8")
    return cv2.LUT(image, table)

# Load image
image = cv2.imread('/content/Picture1.png')
gamma_corrected = gamma_correction(image, gamma=2.0)

# Display the result
plt.figure(figsize=(10,5))
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.subplot(1, 2, 2)
plt.title('Gamma Corrected Image')
plt.imshow(cv2.cvtColor(gamma_corrected, cv2.COLOR_BGR2RGB))
plt.show()


========================================================
def clahe(image):
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    if image is not None: # Check if image was loaded successfully
        if len(image.shape) == 2:
            return clahe.apply(image)
        elif len(image.shape) == 3:
            channels = cv2.split(image)
            clahe_channels = [clahe.apply(ch) for ch in channels]
            return cv2.merge(clahe_channels)
    else:
        return None # Handle the case where image is None

# Load image. Make sure 'image_path' is correct.
image_path = '/content/Picture1.png' # Replace with your actual image path
image = cv2.imread(image_path, 0)
clahe_image = clahe(image)

# Display the result
if clahe_image is not None: # Check if CLAHE was applied successfully
    plt.figure(figsize=(10,5))
    plt.subplot(1, 2, 1)
    plt.title('Original Image')
    plt.imshow(image, cmap='gray')
    plt.subplot(1, 2, 2)
    plt.title('CLAHE Image')
    plt.imshow(clahe_image, cmap='gray')
    plt.show()
else:
    print("Failed to load or apply CLAHE to the image. Check the file path.")


======================================================================================
import cv2 as cv
import numpy as np
from matplotlib import pyplot as plt

image = cv.imread('/content/Picture1.png')

avg = cv.blur(image,(5,5))

# Display the result
plt.figure(figsize=(10,5))
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(cv.cvtColor(image, cv.COLOR_BGR2RGB))
plt.subplot(1, 2, 2)
plt.title('Averaging filtered Image')
plt.imshow(cv.cvtColor(avg, cv.COLOR_BGR2RGB))
plt.show()


==================================================================================
import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Read the image
image = cv2.imread('/content/Picture1.png')

# Convert the image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to the grayscale image
blurred_image = cv2.GaussianBlur(gray_image, (0, 0), 3)

# Perform unsharp masking
unsharp_mask = cv2.addWeighted(gray_image, 2.5, blurred_image, -1.5, 0)

# Convert the result back to BGR
output = cv2.cvtColor(unsharp_mask, cv2.COLOR_GRAY2BGR)

# Display the original and enhanced images
cv2_imshow(image)
cv2_imshow(output)


==================================================================================


1. Gamma Correction (Brightness & Contrast Adjustment)

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/content/Picture1.png"
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB for display

# Function: Gamma Correction
def gamma_correction(image, gamma=1.5):
    inv_gamma = 1.0 / gamma
    table = np.array([(i / 255.0) ** inv_gamma * 255 for i in range(256)]).astype("uint8")
    return cv2.LUT(image, table)

# Apply Gamma Correction
gamma_corrected = gamma_correction(img)

# Display Results
plt.figure(figsize=(10,5))
plt.subplot(1,2,1), plt.imshow(img), plt.title("Original"), plt.axis("off")
plt.subplot(1,2,2), plt.imshow(gamma_corrected), plt.title("Gamma Correction"), plt.axis("off")
plt.show()
=====================================================================================================

2.CLAHE (Contrast Limited Adaptive Histogram Equalization)
# Function: CLAHE (Contrast Enhancement)
def apply_clahe(image):
    lab = cv2.cvtColor(image, cv2.COLOR_RGB2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    l = clahe.apply(l)
    lab = cv2.merge((l, a, b))
    return cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)

# Apply CLAHE
clahe_applied = apply_clahe(img)

# Display Results
plt.figure(figsize=(10,5))
plt.subplot(1,2,1), plt.imshow(img), plt.title("Original"), plt.axis("off")
plt.subplot(1,2,2), plt.imshow(clahe_applied), plt.title("CLAHE"), plt.axis("off")
plt.show()

===============================
3.Averaging Filter (Blurring to Reduce Noise)
# Function: Averaging Filter (Blurring)
def averaging_filter(image, kernel_size=5):
    return cv2.blur(image, (kernel_size, kernel_size))

# Apply Averaging Filter
blurred = averaging_filter(img)

# Display Results
plt.figure(figsize=(10,5))
plt.subplot(1,2,1), plt.imshow(img), plt.title("Original"), plt.axis("off")
plt.subplot(1,2,2), plt.imshow(blurred), plt.title("Averaging Filter (Blur)"), plt.axis("off")
plt.show()
=======================================================
4.Unsharp Masking (Sharpening)
# Function: Unsharp Masking (Sharpening)
def unsharp_mask(image, sigma=1.0, strength=1.5):
    blurred = cv2.GaussianBlur(image, (0, 0), sigma)
    sharpened = cv2.addWeighted(image, 1 + strength, blurred, -strength, 0)
    return sharpened

# Apply Unsharp Masking
sharpened = unsharp_mask(img)

# Display Results
plt.figure(figsize=(10,5))
plt.subplot(1,2,1), plt.imshow(img), plt.title("Original"), plt.axis("off")
plt.subplot(1,2,2), plt.imshow(sharpened), plt.title("Unsharp Masking (Sharpening)"), plt.axis("off")
plt.show()
===========================================
5.Low-Pass Filtering (Smoothing)
# Function: Low-Pass Filter (Smoothing)
def low_pass_filter(image, kernel_size=5):
    return cv2.GaussianBlur(image, (kernel_size, kernel_size), 0)

# Apply Low-Pass Filtering
low_pass = low_pass_filter(img)

# Display Results
plt.figure(figsize=(10,5))
plt.subplot(1,2,1), plt.imshow(img), plt.title("Original"), plt.axis("off")
plt.subplot(1,2,2), plt.imshow(low_pass), plt.title("Low-Pass Filtering (Smoothing)"), plt.axis("off")
plt.show()


=============================================
6.High-Pass Filtering (Edge Enhancement)
# Function: High-Pass Filter (Edge Enhancement)
def high_pass_filter(image):
    kernel = np.array([[-1, -1, -1],
                       [-1,  8, -1],
                       [-1, -1, -1]])
    return cv2.filter2D(image, -1, kernel)

# Apply High-Pass Filtering
high_pass = high_pass_filter(img)

# Display Results
plt.figure(figsize=(10,5))
plt.subplot(1,2,1), plt.imshow(img), plt.title("Original"), plt.axis("off")
plt.subplot(1,2,2), plt.imshow(high_pass), plt.title("High-Pass Filtering (Edge Enhancement)"), plt.axis("off")
plt.show()


